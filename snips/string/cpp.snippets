snippet suffix_array "void suffix_array(const string&, vi&)" !b
int _cnt[_MAX_N], _c[_MAX_N], _pn[_MAX_N], _cn[_MAX_N];

void suffix_array(const string &_s, vector<int> &_p)
{ // {{{
	int _i, _cl, _n = (int)_s.size();
	_p.assign(_n, 0);

	const int _MAX_N = ${1:100500};
	const int _MAX_Alphabet = ${2:256};

	memset(_cnt, 0, sizeof(_cnt));
	for(_i=0; _i<_n; ++_i) ++_cnt[_s[_i]];
	for(_i=1; _i<_MAX_Alphabet; ++_i) _cnt[_i] += _cnt[_i-1];
	for(_i=0; _i<_n; ++_i) _p[--_cnt[_s[_i]]] = _i;
	_c[_p[0]] = 0;
	_cl = 1;
	for(_i=1; _i<_n; ++_i)
	{
		if(_s[_p[_i]] != _s[_p[_i-1]]) ++_cl;
		_c[_p[_i]] = _cl-1;
	}
	for(int _h=0; (1<<_h)<_n && _cl<_n; ++_h)
	{
		for(_i=0; _i<_n; ++_i)
		{
			_pn[_i] = _p[_i] - (1<<_h);
			if(_pn[_i] < 0) _pn[_i] += _n;
		}
		memset(_cnt, 0, sizeof(_cnt));
		for(_i=0; _i<_n; ++_i) ++_cnt[_c[_i]];
		for(_i=1; _i<_cl; ++_i) _cnt[_i] += _cnt[_i-1];
		for(_i=_n-1; _i>=0; --_i) _p[--_cnt[_c[_pn[_i]]]] = _pn[_i];
		_cn[_p[0]] = 0;
		_cl = 1;
		for(_i=1; _i<_n; ++_i)
		{
			int _mid1 = (_p[_i]   + (1<<_h)) % _n;
			int _mid2 = (_p[_i-1] + (1<<_h)) % _n;
			if(_c[_p[_i]] != _c[_p[_i-1]] || _c[_mid1] != _c[_mid2]) ++_cl;
			_cn[_p[_i]] = _cl-1;
		}
		memcpy(_c, _cn, sizeof(_c));
	}
} // }}}
$0
endsnippet
snippet pfun "void pfun(const string&, vi&)" !b
void pfun(const string &_s, vector<int> &_v)
{ // {{{
	int _j, _n = (int)_s.size();
	_v.assign(_n, 0);
	for(int _i=1; _i<_n; ++_i)
	{
		_j = _v[_i-1];
		while(_j > 0 && _s[_i] != _s[_j]) _j = _v[_j-1];
		if(_s[_i] == _s[_j]) ++_j;
		_v[_i] = _j;
	}
} // }}}
$0
endsnippet
snippet zfun "void zfun(const string&, vi&)" !b
void zfun(const string &_s, vector<int> &_v)
{ // {{{
	int _n = (int)_s.size();
	_v.assign(_n, 0);
	for(int _i=1, _l=0, _r=0; _i<_n; ++_i)
	{
		if(_i <= _r) _v[_i] = min(_r-_i+1, _v[_i-_l]);
		while(_i+_v[_i] < _n && _s[_v[_i]] == _s[_i+_v[_i]]) ++_v[_i];
		if(_i+_v[_i]-1 > _r)
		{
			_l = _i;
			_r = _i+_v[_i]-1;
		}
	}
} // }}}
$0
endsnippet
snippet palindromes "void palindromes(const string&, vi&, vi&)" !b
void palindromes(const string &_s, vector<int> &_d1, vector<int> &_d2)
{ // {{{
	int _n = (int)_s.size(), _l, _r, _k;
	_d1.assign(_n, 0);
	_d2.assign(_n, 0);

	_l=0; _r=-1;
	for(int _i=0; _i<_n; ++_i)
	{
		_k = (_i>_r ? 0 : MIN(_d1[_l+_r-_i]-1, _r-_i)) + 1;
		while(_i+_k < _n && _i-_k >= 0 && _s[_i+_k] == _s[_i-_k]) ++_k;
		_d1[_i] = _k--;
		if(_i+_k > _r) { _l=_i-_k; _r=_i+_k; }
	}

	_l=0; _r=-1;
	for(int _i=0; _i<_n; ++_i)
	{
		_k = (_i>_r ? 0 : MIN(_d2[_l+_r-_i+1], _r-_i+1)) + 1;
		while(_i+_k-1<_n && _i-_k >= 0 && _s[_i+_k-1] == _s[_i-_k]) ++_k;
		_d2[_i] = --_k;
		if(_i+_k-1 > _r) { _l=_i-_k; _r=_i+_k-1; }
	}
} // }}}
$0
endsnippet
snippet hash1 "Complect #1" !b
#define HS1 72413791
#define hs1 29
#define ih1 449446491

int hash1(const string &_s)
{ // {{{
	int _r = 0;
	for(int _i=0; _i<(int)_s.size(); ++_i)
	{
		_r *= hs;
		_r += _s[_i]-'${1:a}'+1;
		_r %= HS;
	}
	return _r;
} // }}}
endsnippet
snippet hash2 "Complect #2" !b
#define HS2 56756747
#define hs2 37
#define ih2 33747255

int hash2(const string &_s)
{ // {{{
	int _r = 0;
	for(int _i=0; _i<(int)_s.size(); ++_i)
	{
		_r *= hs2;
		_r += _s[_i]-'${1:a}'+1;
		_r %= HS2;
	}
	return _r;
} // }}}
endsnippet
snippet Bor "Class Bor" !b
class Bor{
	int mm[${1:100500}][${2:27}], len;
	char chr;
public:
	Bor(){	// {{{
		memset(mm, 0, sizeof(mm));
		len = 1;
		chr = 'a';
	}
			// }}}
	Bor(char ch){	// {{{
		memset(mm, 0, sizeof(mm));
		len = 1;
		chr = ch;
	}
					// }}}
	void add(const string &s){	// {{{
		int c = 0;
		for(int i=0; i<(int)s.size(); ++i){
			char ch = s[i] - chr;
			if(!mm[c][ch]) mm[c][ch] = len++;
			c = mm[c][ch];
		}
		mm[c][26] = 1;
	}
								// }}}
	void add(const char s[]){	// {{{
		int c = 0;
		for(int i=0; s[i]; ++i){
			char ch = s[i] - chr;
			if(!mm[c][ch]) mm[c][ch] = len++;
			c = mm[c][ch];
		}
		mm[c][26] = 1;
	}
								// }}}
	bool search(const string &s){	// {{{
		int c = 0;
		for(int i=0; i<(int)s.size(); ++i){
			char ch = s[i] - chr;
			if(!mm[c][ch]) return false;
			c = mm[c][ch];
		}
		return mm[c][26];
	}
									// }}}
	bool search(const char s[]){	// {{{
		int c = 0;
		for(int i=0; s[i]; ++i){
			char ch = s[i] - chr;
			if(!mm[c][ch]) return false;
			c = mm[c][ch];
		}
		return mm[c][26];
	}
									// }}}
};
endsnippet
snippet BorM "Class Bor with map" !b
class BorM{
	map<char,int> mm[${1:100500}];
	int len;
	char chr;
public:
	BorM(){	// {{{
		len = 1;
		chr = 'a';
	}
			// }}}
	BorM(char ch){	// {{{
		len = 1;
		chr = ch;
	}
					// }}}
	void add(const string &s){	// {{{
		int c = 0;
		for(int i=0; i<(int)s.size(); ++i){
			char ch = s[i] - chr;
			if(!mm[c].count(ch)) mm[c][ch] = len++;
			c = mm[c][ch];
		}
		mm[c][26] = 1;
	}
								// }}}
	void add(const char s[]){	// {{{
		int c = 0;
		for(int i=0; s[i]; ++i){
			char ch = s[i] - chr;
			if(!mm[c].count(ch)) mm[c][ch] = len++;
			c = mm[c][ch];
		}
		mm[c][26] = 1;
	}
								// }}}
	bool search(const string &s){	// {{{
		int c = 0;
		for(int i=0; i<(int)s.size(); ++i){
			char ch = s[i] - chr;
			if(!mm[c].count(ch)) return false;
			c = mm[c][ch];
		}
		return mm[c].count(26);
	}
									// }}}
	bool search(const char s[]){	// {{{
		int c = 0;
		for(int i=0; s[i]; ++i){
			char ch = s[i] - chr;
			if(!mm[c].count(ch)) return false;
			c = mm[c][ch];
		}
		return mm[c].count(26);
	}
									// }}}
};
endsnippet
snippet min_cycle_shift "int min_cycle_shift(string)" !b
int min_cycle_shift(string &_str)
{	//{{{
	string _s = _str + _str;
	int _i = 0, _res = 0;
	while(_i < _str.size())
	{
		_res = _i;
		int _k = _i, _j = _i + 1;
		for(;_j < _s.size() && _s[_k] <= _s[_j]; ++_j)
			if(_s[_k] < _s[_j]) _k = _i;
			else ++_k;
		while(_i <= _k) _i += _j - _k;
	}
	return _res;
}	///}}}
$0
endsnippet
snippet count_substring "int count_substring(string)" !b
pfun$0
int count_substring(const string &_str)
{	//{{{
	string _s = "";
	vector<int> _v;
	int _cnt = 0;
	for(int _i=(int)_str.size()-1; _i>=0; --_i)
	{
		_s = _str[_i] + _s;
		pfun(_s, _v);
		_cnt += _s.size() - *max_element(_v.begin(), _v.end());
	}
	return _cnt;
}	//}}}
endsnippet
