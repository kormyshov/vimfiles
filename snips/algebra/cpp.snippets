snippet pow "fast_pow" !b
inline ${1:int} fast_pow($1 _a, ${2:int} _b)
{ // {{{
	$1 _r = 1${3: % MOD};
	for(_b; _b >>= 1)
	{
		if(_b&1) _r = _r *${4:1LL*} _a$3;
		_a = _a *$4 _a$3;
	}
	return _r;
} // }}}
endsnippet
snippet phi "<T> phi(<T>)" !b
inline ${1:int} phi($1 _n)
{ // {{{
	$1 _res = _n, _i;
	for(_i=2; _i*_i<=_n; ++_i)
		if(_n % _i == 0)
		{
			while(_n % _i == 0) _n /= _i;
			_res -= _res / _i;
		}
	if(_n > 1) _res -= _res / _n;
	return _res;
} // }}}
endsnippet
snippet mu "int mu(<T>)" !b
inline int mu(${1:LL} _n)
{ // {{{
	int res = 1;
	for(LL d=2; n>1; d+=1+(d>2)){
        if(d*d>n) d=n;
        if(n%d==0){
            res=-res;
            n/=d;
            if(n%d==0) return 0;
        }
    }
    return res;
} // }}}
endsnippet
snippet inverse "<T> inverse(<T>, <T>)" !b
gcdex$0
inline ${1:int} inverse($1 _n, $1 _m)
{ // {{{
	$1 _x, _y;
	$1 _g = gcdex(_n, _m, _x, _y);
	if(_g != 1) return -1;
	else return (_x % _m + _m) % _m;
} // }}}
endsnippet
snippet inverse_all "void inverse_all(<T>, v<T>&)" !b
inline void inverse_all(${1:int} _m, vector<$1> &_v)
{ // {{{
	_v[1] = 1;
	for(int _i=2; _i < _v.size(); ++_i)
		_v[_i] = (_m - (_m / _i) * 1LL * _v[_m % _i] % _m) % _m;
} // }}}
endsnippet
snippet inverse_all_fact "void inverse_all_fact(<T>, v<T>&)"
inverse_all$0
inline void inverse_all_fact(${1:int} _m, vector<$1> &_v)
{ // {{{
	inverse_all(_m, _v);
	if(_v.size()) _v[0] = 1;
	for(int _i = 2; _i < _v.size(); ++_i)
		_v[_i] = _v[_i] * 1LL * _v[_i-1] % _m;
} // }}}
endsnippet
snippet gcd "<T> gcd(<T>, <T>)" !b
inline ${1:int} gcd($1 _a, $1 _b)
{ // {{{
	if(_a<0) _a=-_a;
	if(_b<0) _b=-_b;
	while(_a!=0 && _b!=0) if(_a > _b) _a%=_b; else _b%=_a;
	return _a+_b;
} // }}}
endsnippet
snippet lcm "<T> lcm(<T>, <T>)" !b
gcd$0
inline ${1:int} lcm($1 _a, $1 _b)
{ // {{{
	return _a / gcd(_a, _b) * _b;
} // }}}
endsnippet
snippet gcdex "<T> gcdex(<T>, <T>, <T>&, <T>&)" !b
inline ${1:int} gcdex($1 _a, $1 _b, $1 &_x, $1 &_y)
{ // {{{
	$1 _r, _q, _x0, _y0, _x1, _y1;
	_y1=_x=_x0=1;
	_x1=_y=_y0=0;
	while(_b!=0){
		_q = _a/_b;
		_r = _a-_q*_b;
		if(_r!=0){
			_x = _x0-_q*_x1;
			_y = _y0-_q*_y1;
			_x0 = _x1; _y0 = _y1;
			_x1 = _x; _y1 = _y;
		}
		_a = _b; _b = _r;
	}
	if(_a<0) {_a=-_a; _x=-_x; _y=-_y;}
	return _a;
} // }}}
endsnippet
snippet getDivisors "void getDivisors(<T>, v<T>&)" !b
inline void getDivisors(${1:int} _n, vector<$1> &_r)
{ // {{{
	$1 _sq = (int)sqrt(_n+.0), _i;
	for(_i=1; _i<=_sq; ++_i)
		if(_n%_i==0)
			_r.push_back(_i);
	for(_i=(int)_r.size()-(_sq*_sq==_n)-1;_i>=0;--_i)
		_r.push_back(_n/_r[_i]);
} // }}}
endsnippet
snippet factorize "void factorize(<T>, v<T>&)" !b
inline void factorize(${1:int} _n, vector<$1> &_r)
{ // {{{
	$1 _x;
	for(_x=2; _n>1;)
	{
		while(_n%_x==0)
		{
			_r.push_back(_x);
			_n/=_x;
		}
		_x += 1 + (_x>2);
		if(_x*_x>_n) _x=_n;
	}
} // }}}
endsnippet
snippet eratosfen "void eratosfen(vi&)" !b
inline void eratosfen(vector<int> &_m)
{ // {{{
	int _n = _m.size();
	for(int _i=2; _i < _n; ++_i) _m[_i] = 1;
	_m[0] = _m[1] = 0;
	for(int _i=2; _i * 1LL * _i < _n; ++_i)
		if(_m[_i])
			for(int _j=_i*_i; _j<_n; _j+=_i)
				_m[_j] = 0;
} // }}}
endsnippet
snippet atkin "void atkin(vi&)" !b
inline void atkin(vector<int> &_m)
{ // {{{
	int _n = _m.size(), _sqrt, _i, _j, _i2 = 0, _a;
	_sqrt = 2*(int)sqrt(_n);
	for(_i=0; _i < _n; ++_i) _m[_i] = 0;
	_m[2] = _m[3] = 1;
	for(_i=1; _i < _sqrt; _i+=2){
		_i2 += _i;
		_a = 4*_i2;
		for(_j=1; _a < _n; _j+=2){
			if(_a%12 == 1 || _a%12 == 5)
				_m[_a] ^= 1;
			_a += _j;
		}
		_a = 3*_i2;
		for(_j=1; _a < _n; _j+=2){
			if(_a%12 == 7)
				_m[_a] ^= 1;
			_a += _j;
		}
		_a = 3*_i2;
		for(_j=1; _j < _i; _j+=2){
			_a -= _j;
			if(_a < _n && _a%12 == 11)
				_m[_a] ^= 1;
		}
	}
	_sqrt >>= 1;
	for(_i=5; _i < _sqrt; ++_i)
		if(_m[_i]){
			_a = _i*_i;
			for(_j=_a; _j < _n; _j+=_a)
				_m[_j] = 0;
		}
} // }}}
endsnippet
snippet fibonacci "<T> fibonacci(<T2>, <T>)" !b
inline ${1:int} fibonacci(${2:int} _n, $1 _mod=0)
{ // {{{
	$1 _r11=1, _r12=0, _r21=0, _r22=1;
	$1 _a1=0, _a2=1, _a3=1;
	$1 _t11, _t12, _t21, _t22;
	while(_n){
		if(_n&1)
		{
			_t11 = (_r11 * _a1 + _r12 * _a2) ${3:% _mod};
			_t12 = (_r11 * _a2 + _r12 * _a3) $3;
			_t21 = (_r21 * _a1 + _r22 * _a2) $3;
			_t22 = (_r21 * _a2 + _r22 * _a3) $3;

			_r11 = _t11; _r12 = _t12; _r21 = _t21; _r22 = _t22;
		}
		_t11 = (_a1 * _a1 + _a2 * _a2) $3;
		_t12 = (_a1 * _a2 + _a2 * _a3) $3;
		_t22 = (_a2 * _a2 + _a3 * _a3) $3;

		_a1 = _t11; _a2 = _t12; _a3 = _t22;

		_n >>= 1;
	}
	return _r21;
} // }}}
endsnippet
snippet grey "int grey(int)" !b
inline int grey(int _n)
{ // {{{
	return _n ^ (_n >> 1);
} // }}}
endsnippet
snippet reverse_grey "int reverse_grey(int)" !b
inline int reverse_grey(int _code)
{ // {{{
	int _n = 0;
	for(; _code; _code >>= 1)
		_n ^= _code;
	return _n;
} // }}}
endsnippet
snippet factmod "int factmod(<T>, int)" !b
inline int factmod(${1:int} _n, int _MOD)
{ // {{{
	int _res = 1;
	while(_n > 1)
	{
		_res = (_res * (((_n/_MOD)&1) ? _MOD-1 : 1)) % _MOD;
		for(int _i=2; _i <= _n % _MOD; ++_i)
			_res = (_res * 1LL * _i) % _MOD;
		_n /= _MOD;
	}
	return _res % _MOD;
} // }}}
endsnippet
snippet isPrime "bool isPrime(<T>)" !b
inline bool isPrime(${1:int} _n)
{ // {{{
	if(_n<2 || (_n>3 && (_n%6&3)!=1)) return false;
	for($1 _i=5, _k=4; _i*_i<=_n; _i+=_k^6)
		if(_n%_i==0) return false;
	return true;
} // }}}
endsnippet
snippet Cnk "C_n^k" !b
inline ${1:LL} Cnk(int _n, int _k)
{ // {{{
	$1 _r = 1;
	int _t = max(_k, _n-_k);
	for(int _i=_t+1; _i <= _n; ++_i)
	{
		_r *= _i;
		_r /= _i - _t;
	}
	return _r;
} // }}}
endsnippet
snippet Cnks "All cnk" !b
${1:int} cnk[${2:109}][${3:109}];
memset(cnk, 0, sizeof(cnk));
cnk[0][0] = 1;
for(int _=1; _<$2; ++_){
	cnk[_][0] = 1;
	for(int __=1; __<$3; ++__)
		cnk[_][__] = (cnk[_-1][__] + cnk[_-1][__-1])${4: % MOD};
}
endsnippet
snippet Catalan "Catalan_n" !b
${2:Cnk}
inline ${1:LL} Catalan(int _n)
{ // {{{
	return Cnk(2 * _n, _n) / (1 + _n);
} // }}}
endsnippet
snippet isSquare "bool isSquare(number)" !b
inline bool isSquare(${1:int} _a)
{ // {{{
	if(_a < 0) return false;
	$1 _t = ($1)sqrt(_a+.0);
	return _t * _t == _a;
} // }}}
endsnippet
snippet isPow2 "bool isPow2(number)" !b
inline bool isPow2(${1:int} _a)
{ // {{{
	return a>0 && (a&(a-1)) == 0;
} // }}}
endsnippet
snippet bitCount "int bitCount(number)" !b
const int _bitCount_len  = 16;
const int _bitCount_len2 = _bitCount_len << 1;
const int _bitCount_len3 = _bitCount_len * 3;

char _bitCount_m[1 << _bitCount_len];
int bitCount(${1:LL}${2:int} _a)
{ // {{{
	static bool _f;
	if(!_f)
	{
		_bitCount_m[0] = 0;
		for(int _i = 1; _i < (1 << _bitCount_len); ++_i)
			_bitCount_m[_i] = _bitCount_m[_i & (_i - 1)] + 1;
		_f = true;
	}
	return _bitCount_m[_a & 0xFFFF] + _bitCount_m[(_a >> _bitCount_len) & 0xFFFF] ${1/(LL)/+ _bitCount_m[(_a >> _bitCount_len2) & 0xFFFF] + _bitCount_m[(_a >> _bitCount_len3) & 0xFFFF]/};
} // }}}
endsnippet
snippet mulmod "LL mulmod(LL, LL, LL)" !b
inline LL mulmod(LL a, LL b, LL m)
{ // {{{
	if(a>m) a%=m;
	if(b>m) b%=m;
	LL k = (LL)((long double)a * b / m);
	LL r = a * b - m * k;
	while(r<0) r+=m;
	while(r>m) r-=m;
	return r;
} // }}}
endsnippet
snippet powmod "LL powmod(LL, LL, LL)" !b
mulmod$0
LL powmod(LL a, LL b, LL m)
{ // {{{
	if(a>m) a%=m;
	if(b>m) b%=m;
	LL r=1;
	while(b)
	{
		if(b&1) r = mulmod(r, a, m);
		a = mulmod(a, a, m);
		b >>= 1;
	}
	return r;
} // }}}
endsnippet
snippet nmsb "Number most significant bit" !b
int _nmsb_m[256];
inline int nmsb(unsigned int _x)
{ // {{{
	static bool _f;
	if(!_f)
	{
		_nmsb_m[0] = -1; _nmsb_m[1] = 0;
		for(int _i = 2; _i < 256; ++_i)
			_nmsb_m[_i] = _nmsb_m[_i >> 1] + 1;
		_f = true;
	}

	if(_x >> 24 != 0) return _nmsb_m[_x >> 24] + 24;
	if(_x >> 16 != 0) return _nmsb_m[_x >> 16] + 16;
	if(_x >>  8 != 0) return _nmsb_m[_x >>  8] +  8;
	return _nmsb_m[_x];
} // }}}
endsnippet
snippet _nmsb_ "Number most significant bit (short version)" !b
int nmsb(unsigned int _x)
{ // {{{
	union { double _a; int _b[2]; };
	_a = _x;
	return (_b[1] >> 20) - 1023;
} // }}}
endsnippet
snippet msb "Most significant bit" !b
int _msb_m[256];
inline int msb(unsigned int _x)
{ // {{{
	static bool _f;
	if(!_f)
	{
		_msb_m[0] = 0; _msb_m[1] = 1;
		for(int _i = 2; _i < 256; ++_i)
			_msb_m[_i] = _msb_m[_i >> 1] << 1;
		_f = true;
	}

	if(_x >> 24 != 0) return _msb_m[_x >> 24] << 24;
	if(_x >> 16 != 0) return _msb_m[_x >> 16] << 16;
	if(_x >>  8 != 0) return _msb_m[_x >>  8] <<  8;
	return _msb_m[_x];
} // }}}
endsnippet
snippet lsb "Least significant bit" !b
inline int lsb(unsigned int _x)
{ // {{{
	return _x & -_x;
} // }}}
endsnippet
