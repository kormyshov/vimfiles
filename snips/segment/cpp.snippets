snippet RSQ "RSQ" !b
class RSQ{
	${1:LL} *m;
	int N;
public:
	RSQ(int n){	// {{{
		N = n;
		m = new $1[4*N];
		memset(m, 0, sizeof($1)*4*N);
	}
				// }}}
	RSQ($1 a[], int n){	// {{{
		N = n;
		m = new $1[4*N];
		init(a, 1, 0, N-1);
	}
						// }}}
	RSQ(vector<$1> &v){	// {{{
		N = v.size();
		m = new $1[4*N];
		init(v, 1, 0, N-1);
	}
						// }}}
	// {{{
	void init($1 a[], int v, int vl, int vr){
		if(vl==vr){
			m[v] = a[vl];
			return ;
		}
		int mid = (vl+vr)>>1;
		init(a, v<<1, vl, mid);
		init(a, v<<1|1, mid+1, vr);
		m[v] = m[v<<1] + m[v<<1|1];
	}
	void init(vector<$1> &a, int v, int vl, int vr){
		if(vl==vr){
			m[v] = a[vl];
			return ;
		}
		int mid = (vl+vr)>>1;
		init(a, v<<1, vl, mid);
		init(a, v<<1|1, mid+1, vr);
		m[v] = m[v<<1] + m[v<<1|1];
	}
	// }}}
	void add(int i, $1 d){	// {{{
		int mid, v=1, vl=0, vr=N-1;
		while(vl!=i || vr!=i){
			m[v] += d;
			mid = (vl+vr)>>1;
			if(i<=mid) v<<=1, vr=mid;
			else v=v<<1|1, vl=mid+1;
		}
		m[v] += d;
	}
							// }}}
	$1 sum(int l, int r){	// {{{
		return sum(l, r, 1, 0, N-1);
	}
	$1 sum(int l, int r, int v, int vl, int vr){
		if(l>r) return 0;
		if(l<=vl && r>=vr) return m[v];
		int mid = (vl+vr)>>1;
		return sum(l, MIN(r, mid), v<<1, vl, mid)
			  +sum(MAX(l, mid+1), r, v<<1|1, mid+1, vr);
	}
							// }}}
	int ind_with_sum($1 s){	// {{{
		int v=1, vl=0, vr=N-1, mid;
		while(vl < vr){
			mid = (vl+vr)>>1;
			v<<=1;
			if(m[v] >= s) vr=mid;
			else s-=m[v], v|=1, vl=mid+1;
		}
		return vl;
	}
							// }}}
};
$0
endsnippet
snippet RMaxQ "RMaxQ" !b
class RMaxQ{
	${1:int} *m;
	int N;
public:
	RMaxQ(int n){	// {{{
		N = n;
		m = new $1[4*N];
		memset(m, 128, sizeof($1)*4*N);
	}
					// }}}
	RMaxQ(int a[], int n){	// {{{
		N = n;
		m = new $1[4*N];
		init(a, 1, 0, N-1);
	}
							// }}}
	RMaxQ(vector<int> &v){	// {{{
		N = v.size();
		m = new $1[4*N];
		init(v, 1, 0, N-1);
	}
							// }}}
	// {{{
	void init(int a[], int v, int vl, int vr){
		if(vl==vr){
			m[v] = a[vl];
			return ;
		}
		int mid = (vl+vr)>>1;
		init(a, v<<1, vl, mid);
		init(a, v<<1|1, mid+1, vr);
		m[v] = MAX(m[v<<1], m[v<<1|1]);
	}
	void init(vector<int> &a, int v, int vl, int vr){
		if(vl==vr){
			m[v] = a[vl];
			return ;
		}
		int mid = (vl+vr)>>1;
		init(a, v<<1, vl, mid);
		init(a, v<<1|1, mid+1, vr);
		m[v] = MAX(m[v<<1], m[v<<1|1]);
	}
	// }}}
	void add(int i, $1 d){	// {{{
		add(i, d, 1, 0, N-1);
	}
	void add(int i, $1 d, int v, int vl, int vr){
		if(vl==i && vr==i){
			m[v] += d;
			return ;
		}
		int mid = (vl+vr)>>1;
		if(i<=mid) add(i, d, v<<1, vl, mid);
		else add(i, d, v<<1|1, mid+1, vr);
		m[v] = MAX(m[v<<1], m[v<<1|1]);
	}
							// }}}
	$1 max(int l, int r){	// {{{
		return max(l, r, 1, 0, N-1);
	}
	$1 max(int l, int r, int v, int vl, int vr){
		if(l>r) return -INF;
		if(l<=vl && r>=vr) return m[v];
		int mid = (vl+vr)>>1;
		return std::max(max(l, MIN(r, mid), v<<1, vl, mid),
			   max(MAX(l, mid+1), r, v<<1|1, mid+1, vr));
	}
							// }}}
	int lower_bound($1 a){	// {{{
		if(m[1]<a) return N;
		int v=1, vl=0, vr=N-1, mid;
		while(vl < vr){
			mid = (vl+vr)>>1;
			v<<=1;
			if(m[v]>=a) vr=mid;
			else v|=1, vl=mid+1;
		}
		return vl;
	}
							// }}}
	int upper_bound($1 a){	// {{{
		if(m[1]<=a) return N;
		int v=1, vl=0, vr=N-1, mid;
		while(vl < vr){
			mid = (vl+vr)>>1;
			v<<=1;
			if(m[v]>a) vr=mid;
			else v|=1, vl=mid+1;
		}
		return vl;
	}
							// }}}
};
$0
endsnippet
snippet RMinQ "RMinQ" !b
class RMinQ{
	${1:int} *m;
	int N;
public:
	RMinQ(int n){	// {{{
		N = n;
		m = new $1[4*N];
		memset(m, 127, sizeof($1)*4*N);
	}
					// }}}
	RMinQ(int a[], int n){	// {{{
		N = n;
		m = new $1[4*N];
		init(a, 1, 0, N-1);
	}
							// }}}
	RMinQ(vector<int> &v){	// {{{
		N = v.size();
		m = new $1[4*N];
		init(v, 1, 0, N-1);
	}
							// }}}
	// {{{
	void init(int a[], int v, int vl, int vr){
		if(vl==vr){
			m[v] = a[vl];
			return ;
		}
		int mid = (vl+vr)>>1;
		init(a, v<<1, vl, mid);
		init(a, v<<1|1, mid+1, vr);
		m[v] = MIN(m[v<<1], m[v<<1|1]);
	}
	void init(vector<int> &a, int v, int vl, int vr){
		if(vl==vr){
			m[v] = a[vl];
			return ;
		}
		int mid = (vl+vr)>>1;
		init(a, v<<1, vl, mid);
		init(a, v<<1|1, mid+1, vr);
		m[v] = MIN(m[v<<1], m[v<<1|1]);
	}
	// }}}
	void add(int i, $1 d){	// {{{
		add(i, d, 1, 0, N-1);
	}
	void add(int i, $1 d, int v, int vl, int vr){
		if(vl==i && vr==i){
			m[v] += d;
			return ;
		}
		int mid = (vl+vr)>>1;
		if(i<=mid) add(i, d, v<<1, vl, mid);
		else add(i, d, v<<1|1, mid+1, vr);
		m[v] = MIN(m[v<<1], m[v<<1|1]);
	}
							// }}}
	$1 min(int l, int r){	// {{{
		return min(l, r, 1, 0, N-1);
	}
	$1 min(int l, int r, int v, int vl, int vr){
		if(l>r) return INF;
		if(l<=vl && r>=vr) return m[v];
		int mid = (vl+vr)>>1;
		return std::min(min(l, MIN(r, mid), v<<1, vl, mid),
			   min(MAX(l, mid+1), r, v<<1|1, mid+1, vr));
	}
							// }}}
	int lower_bound($1 a){	// {{{
		if(m[1]>a) return N;
		int v=1, vl=0, vr=N-1, mid;
		while(vl < vr){
			mid = (vl+vr)>>1;
			v<<=1;
			if(m[v]<=a) vr=mid;
			else v|=1, vl=mid+1;
		}
		return vl;
	}
							// }}}
	int upper_bound($1 a){	// {{{
		if(m[1]>=a) return N;
		int v=1, vl=0, vr=N-1, mid;
		while(vl < vr){
			mid = (vl+vr)>>1;
			v<<=1;
			if(m[v]<a) vr=mid;
			else v|=1, vl=mid+1;
		}
		return vl;
	}
							// }}}
};
$0
endsnippet
snippet RMaxQInd "RMaxQInd" !b
class RMaxQInd{
	${1:int} *m;
	int N, *ind;
public:
	RMaxQInd(int n){	// {{{
		N = n;
		m = new $1[4*N];
		ind = new int[4*N];
		memset(m, 128, sizeof($1)*4*N);
		memset(ind, 0, sizeof(int)*4*N);
	}
						// }}}
	RMaxQInd(int a[], int n){	// {{{
		N = n;
		m = new $1[4*N];
		ind = new int[4*N];
		init(a, 1, 0, N-1);
	}
								// }}}
	RMaxQInd(vector<int> &v){	// {{{
		N = v.size();
		m = new $1[4*N];
		ind = new int[4*N];
		init(v, 1, 0, N-1);
	}
								// }}}
	// {{{
	void init(int a[], int v, int vl, int vr){
		if(vl==vr){
			m[v] = a[vl];
			ind[v] = vl;
			return ;
		}
		int mid = (vl+vr)>>1;
		init(a, v<<1, vl, mid);
		init(a, v<<1|1, mid+1, vr);
		mid = v<<1;
		if(m[mid|1] > m[mid]) mid|=1;
		m[v] = m[mid];
		ind[v] = ind[mid];
	}
	void init(vector<int> &a, int v, int vl, int vr){
		if(vl==vr){
			m[v] = a[vl];
			ind[v] = vl;
			return ;
		}
		int mid = (vl+vr)>>1;
		init(a, v<<1, vl, mid);
		init(a, v<<1|1, mid+1, vr);
		mid = v<<1;
		if(m[mid|1] > m[mid]) mid|=1;
		m[v] = m[mid];
		ind[v] = ind[mid];
	}
	// }}}
	void add(int i, $1 d){	// {{{
		add(i, d, 1, 0, N-1);
	}
	void add(int i, $1 d, int v, int vl, int vr){
		if(vl==i && vr==i){
			m[v] += d;
			return ;
		}
		int mid = (vl+vr)>>1;
		if(i<=mid) add(i, d, v<<1, vl, mid);
		else add(i, d, v<<1|1, mid+1, vr);
		mid = v<<1;
		if(m[mid|1] > m[mid]) mid|=1;
		m[v] = m[mid];
		ind[v] = ind[mid];
	}
							// }}}
	$1 max(int l, int r){	// {{{
		return max(l, r, 1, 0, N-1);
	}
	$1 max(int l, int r, int v, int vl, int vr){
		if(l>r) return -INF;
		if(l<=vl && r>=vr) return m[v];
		int mid = (vl+vr)>>1;
		return std::max(max(l, MIN(r, mid), v<<1, vl, mid),
			   max(MAX(l, mid+1), r, v<<1|1, mid+1, vr));
	}
							// }}}
	pair<$1, int> max_with_ind(int l, int r){	// {{{
		return max_with_ind(l, r, 1, 0, N-1);
	}
	pair<$1, int> max_with_ind(int l, int r, int v, int vl, int vr){
		if(l>r) return make_pair(-INF, 0);
		if(l<=vl && r>=vr) return make_pair(m[v], ind[v]);
		int mid = (vl+vr)>>1;
		pair<$1, int> p1 = max_with_ind(l, MIN(r, mid), v<<1, vl, mid);
		pair<$1, int> p2 = max_with_ind(MAX(l, mid+1), r, v<<1|1, mid+1, vr);
		if(p2.first > p1.first) return p2;
		else return p1;
	}
												// }}}
	int lower_bound($1 a){	// {{{
		if(m[1]<a) return N;
		int v=1, vl=0, vr=N-1, mid;
		while(vl < vr){
			mid = (vl+vr)>>1;
			v<<=1;
			if(m[v]>=a) vr=mid;
			else v|=1, vl=mid+1;
		}
		return vl;
	}
							// }}}
	int upper_bound($1 a){	// {{{
		if(m[1]<=a) return N;
		int v=1, vl=0, vr=N-1, mid;
		while(vl < vr){
			mid = (vl+vr)>>1;
			v<<=1;
			if(m[v]>a) vr=mid;
			else v|=1, vl=mid+1;
		}
		return vl;
	}
							// }}}
};
$0
endsnippet
snippet RMinQInd "RMinQInd" !b
class RMinQInd{
	${1:int} *m;
	int N, *ind;
public:
	RMinQInd(int n){	// {{{
		N = n;
		m = new $1[4*N];
		ind = new int[4*N];
		memset(m, 127, sizeof($1)*4*N);
		memset(ind, 0, sizeof(int)*4*N);
	}
						// }}}
	RMinQInd(int a[], int n){	// {{{
		N = n;
		m = new $1[4*N];
		ind = new int[4*N];
		init(a, 1, 0, N-1);
	}
								// }}}
	RMinQInd(vector<int> &v){	// {{{
		N = v.size();
		m = new $1[4*N];
		ind = new int[4*N];
		init(v, 1, 0, N-1);
	}
								// }}}
	// {{{
	void init(int a[], int v, int vl, int vr){
		if(vl==vr){
			m[v] = a[vl];
			ind[v] = vl;
			return ;
		}
		int mid = (vl+vr)>>1;
		init(a, v<<1, vl, mid);
		init(a, v<<1|1, mid+1, vr);
		mid = v<<1;
		if(m[mid|1] < m[mid]) mid|=1;
		m[v] = m[mid];
		ind[v] = ind[mid];
	}
	void init(vector<int> &a, int v, int vl, int vr){
		if(vl==vr){
			m[v] = a[vl];
			ind[v] = vl;
			return ;
		}
		int mid = (vl+vr)>>1;
		init(a, v<<1, vl, mid);
		init(a, v<<1|1, mid+1, vr);
		mid = v<<1;
		if(m[mid|1] < m[mid]) mid|=1;
		m[v] = m[mid];
		ind[v] = ind[mid];
	}
	// }}}
	void add(int i, $1 d){	// {{{
		add(i, d, 1, 0, N-1);
	}
	void add(int i, $1 d, int v, int vl, int vr){
		if(vl==i && vr==i){
			m[v] += d;
			return ;
		}
		int mid = (vl+vr)>>1;
		if(i<=mid) add(i, d, v<<1, vl, mid);
		else add(i, d, v<<1|1, mid+1, vr);
		mid = v<<1;
		if(m[mid|1] < m[mid]) mid|=1;
		m[v] = m[mid];
		ind[v] = ind[mid];
	}
							// }}}
	$1 min(int l, int r){	// {{{
		return min(l, r, 1, 0, N-1);
	}
	$1 min(int l, int r, int v, int vl, int vr){
		if(l>r) return INF;
		if(l<=vl && r>=vr) return m[v];
		int mid = (vl+vr)>>1;
		return std::min(min(l, MIN(r, mid), v<<1, vl, mid),
			   min(MAX(l, mid+1), r, v<<1|1, mid+1, vr));
	}
							// }}}
	pair<$1, int> min_with_ind(int l, int r){	// {{{
		return min_with_ind(l, r, 1, 0, N-1);
	}
	pair<$1, int> min_with_ind(int l, int r, int v, int vl, int vr){
		if(l>r) return make_pair(INF, 0);
		if(l<=vl && r>=vr) return make_pair(m[v], ind[v]);
		int mid = (vl+vr)>>1;
		pair<$1, int> p1 = min_with_ind(l, MIN(r, mid), v<<1, vl, mid);
		pair<$1, int> p2 = min_with_ind(MAX(l, mid+1), r, v<<1|1, mid+1, vr);
		if(p2.first < p1.first) return p2;
		else return p1;
	}
												// }}}
	int lower_bound($1 a){	// {{{
		if(m[1]>a) return N;
		int v=1, vl=0, vr=N-1, mid;
		while(vl < vr){
			mid = (vl+vr)>>1;
			v<<=1;
			if(m[v]<=a) vr=mid;
			else v|=1, vl=mid+1;
		}
		return vl;
	}
							// }}}
	int upper_bound($1 a){	// {{{
		if(m[1]>=a) return N;
		int v=1, vl=0, vr=N-1, mid;
		while(vl < vr){
			mid = (vl+vr)>>1;
			v<<=1;
			if(m[v]<a) vr=mid;
			else v|=1, vl=mid+1;
		}
		return vl;
	}
							// }}}
};
$0
endsnippet
snippet RSQAdd "RSQAdd" !b
class RSQAdd{
	${1:LL} *m, *mt;
	int N;
public:
	RSQAdd(int n){	// {{{
		N = n;
		m = new $1[4*N];
		mt = new $1[4*N];
		memset(m, 0, sizeof($1)*4*N);
		memset(mt, 0, sizeof($1)*4*N);
	}
					// }}}
	RSQAdd(int a[], int n){	// {{{
		N = n;
		m = new $1[4*N];
		mt = new $1[4*N];
		init(a, 1, 0, N-1);
		memset(mt, 0, sizeof($1)*4*N);
	}
							// }}}
	RSQAdd(vector<int> &v){	// {{{
		N = v.size();
		m = new int[4*N];
		mt = new int[4*N];
		init(v, 1, 0, N-1);
		memset(mt, 0, sizeof($1)*4*N);
	}
							// }}}
	// {{{
	void init(int a[], int v, int vl, int vr){
		if(vl==vr){
			m[v] = a[vl];
			return ;
		}
		int mid = (vl+vr)>>1;
		init(a, v<<1, vl, mid);
		init(a, v<<1|1, mid+1, vr);
		m[v] = m[v<<1] + m[v<<1|1];
	}
	void init(vector<int> &a, int v, int vl, int vr){
		if(vl==vr){
			m[v] = a[vl];
			return ;
		}
		int mid = (vl+vr)>>1;
		init(a, v<<1, vl, mid);
		init(a, v<<1|1, mid+1, vr);
		m[v] = m[v<<1] + m[v<<1|1];
	}
	// }}}
	void add(int i, $1 d){	// {{{
		int mid, v=1, vl=0, vr=N-1;
		while(vl!=i || vr!=i){
			m[v] += d;
			mid = (vl+vr)>>1;
			if(i<=mid) v<<=1, vr=mid;
			else v=v<<1|1, vl=mid+1;
		}
		m[v] += d;
	}
							// }}}
	void add(int l, int r, $1 d){	// {{{
		add(l, r, d, 1, 0, N-1);
	}
	void add(int l, int r, $1 d, int v, int vl, int vr){
		if(l>r) return ;
		if(l<=vl && r>=vr){
			mt[v] += d;
			m[v] += d*(r-l+1);
			return ;
		}
		int mid = (vl+vr)>>1;
		add(l, MIN(r, mid), d, v<<1, vl, mid);
		add(MAX(l, mid+1), r, d, v<<1|1, mid+1, vr);
		m[v] += d*(r-l+1);
	}
									// }}}
	$1 sum(int l, int r){	// {{{
		return sum(l, r, 1, 0, N-1);
	}
	$1 sum(int l, int r, int v, int vl, int vr){
		if(l>r) return 0;
		if(l<=vl && r>=vr) return m[v];
		int mid = (vl+vr)>>1;
		return sum(l, MIN(r, mid), v<<1, vl, mid)
			 + sum(MAX(l, mid+1), r, v<<1|1, mid+1, vr)
			 + mt[v]*(r-l+1);
	}
							// }}}
};
$0
endsnippet
snippet RMaxQAdd "RMaxQAdd" !b
class RMaxQAdd{
	${1:int} *m, *mt;
	int N;
public:
	RMaxQAdd(int n){	// {{{
		N = n;
		m = new $1[4*N];
		mt = new $1[4*N];
		memset(m, 128, sizeof($1)*4*N);
		memset(mt, 0, sizeof($1)*4*N);
	}
						// }}}
	RMaxQAdd(int a[], int n){	// {{{
		N = n;
		m = new $1[4*N];
		mt = new $1[4*N];
		init(a, 1, 0, N-1);
		memset(mt, 0, sizeof($1)*4*N);
	}
								// }}}
	RMaxQAdd(vector<int> &v){	// {{{
		N = v.size();
		m = new $1[4*N];
		mt = new $1[4*N];
		init(v, 1, 0, N-1);
		memset(mt, 0, sizeof($1)*4*N);
	}
								// }}}
	// {{{
	void init(int a[], int v, int vl, int vr){
		if(vl==vr){
			m[v] = a[vl];
			return ;
		}
		int mid = (vl+vr)>>1;
		init(a, v<<1, vl, mid);
		init(a, v<<1|1, mid+1, vr);
		m[v] = MAX(m[v<<1], m[v<<1|1]);
	}
	void init(vector<int> &a, int v, int vl, int vr){
		if(vl==vr){
			m[v] = a[vl];
			return ;
		}
		int mid = (vl+vr)>>1;
		init(a, v<<1, vl, mid);
		init(a, v<<1|1, mid+1, vr);
		m[v] = MAX(m[v<<1], m[v<<1|1]);
	}
	// }}}
	void add(int i, $1 d){	// {{{
		add(i, d, 1, 0, N-1);
	}
	void add(int i, $1 d, int v, int vl, int vr){
		if(vl==i && vr==i){
			m[v] += d;
			return ;
		}
		int mid = (vl+vr)>>1;
		if(i<=mid) add(i, d, v<<1, vl, mid);
		else add(i, d, v<<1|1, mid+1, vr);
		m[v] = MAX(m[v<<1], m[v<<1|1]);
	}
							// }}}
	void add(int l, int r, $1 d){	// {{{
		add(l, r, d, 1, 0, N-1);
	}
	void add(int l, int r, $1 d, int v, int vl, int vr){
		if(l>r) return ;
		if(l<=vl && r>=vr){
			mt[v] += d;
			m[v] += d;
			return ;
		}
		int mid = (vl+vr)>>1;
		add(l, MIN(r, mid), d, v<<1, vl, mid);
		add(MAX(l, mid+1), r, d, v<<1|1, mid+1, vr);
		m[v] = MAX(m[v<<1], m[v<<1|1]) + mt[v];
	}
									// }}}
	$1 max(int l, int r){	// {{{
		return max(l, r, 1, 0, N-1);
	}
	$1 max(int l, int r, int v, int vl, int vr){
		if(l>r) return -INF;
		if(l<=vl && r>=vr) return m[v];
		int mid = (vl+vr)>>1;
		return std::max(max(l, MIN(r, mid), v<<1, vl, mid),
				max(MAX(l, mid+1), r, v<<1|1, mid+1, vr))
			  + mt[v];
	}
							// }}}
};
$0
endsnippet
snippet RMinQAdd "RMinQAdd" !b
class RMinQAdd{
	${1:int} *m, *mt;
	int N;
public:
	RMinQAdd(int n){	// {{{
		N = n;
		m = new $1[4*N];
		mt = new $1[4*N];
		memset(m, 127, sizeof($1)*4*N);
		memset(mt, 0, sizeof($1)*4*N);
	}
						// }}}
	RMinQAdd(int a[], int n){	// {{{
		N = n;
		m = new $1[4*N];
		mt = new $1[4*N];
		init(a, 1, 0, N-1);
		memset(mt, 0, sizeof($1)*4*N);
	}
								// }}}
	RMinQAdd(vector<int> &v){	// {{{
		N = v.size();
		m = new $1[4*N];
		mt = new $1[4*N];
		init(v, 1, 0, N-1);
		memset(mt, 0, sizeof($1)*4*N);
	}
								// }}}
	// {{{
	void init(int a[], int v, int vl, int vr){
		if(vl==vr){
			m[v] = a[vl];
			return ;
		}
		int mid = (vl+vr)>>1;
		init(a, v<<1, vl, mid);
		init(a, v<<1|1, mid+1, vr);
		m[v] = MIN(m[v<<1], m[v<<1|1]);
	}
	void init(vector<int> &a, int v, int vl, int vr){
		if(vl==vr){
			m[v] = a[vl];
			return ;
		}
		int mid = (vl+vr)>>1;
		init(a, v<<1, vl, mid);
		init(a, v<<1|1, mid+1, vr);
		m[v] = MIN(m[v<<1], m[v<<1|1]);
	}
	// }}}
	void add(int i, $1 d){	// {{{
		add(i, d, 1, 0, N-1);
	}
	void add(int i, $1 d, int v, int vl, int vr){
		if(vl==i && vr==i){
			m[v] += d;
			return ;
		}
		int mid = (vl+vr)>>1;
		if(i<=mid) add(i, d, v<<1, vl, mid);
		else add(i, d, v<<1|1, mid+1, vr);
		m[v] = MIN(m[v<<1], m[v<<1|1]);
	}
							// }}}
	void add(int l, int r, $1 d){	// {{{
		add(l, r, d, 1, 0, N-1);
	}
	void add(int l, int r, $1 d, int v, int vl, int vr){
		if(l>r) return ;
		if(l<=vl && r>=vr){
			mt[v] += d;
			m[v] += d;
			return ;
		}
		int mid = (vl+vr)>>1;
		add(l, MIN(r, mid), d, v<<1, vl, mid);
		add(MAX(l, mid+1), r, d, v<<1|1, mid+1, vr);
		m[v] = MIN(m[v<<1], m[v<<1|1]) + mt[v];
	}
									// }}}
	$1 min(int l, int r){	// {{{
		return min(l, r, 1, 0, N-1);
	}
	$1 min(int l, int r, int v, int vl, int vr){
		if(l>r) return INF;
		if(l<=vl && r>=vr) return m[v];
		int mid = (vl+vr)>>1;
		return std::min(min(l, MIN(r, mid), v<<1, vl, mid),
				min(MAX(l, mid+1), r, v<<1|1, mid+1, vr))
			  + mt[v];
	}
							// }}}
};
$0
endsnippet
snippet RSQSet "RSQSet" !b
class RSQSet{
	${1:LL} *m, *mt;
	int N;
	int def;
public:
	RSQSet(int n){	// {{{
		def = ${2:-1234567890};
		N = n;
		m = new $1[4*N];
		mt= new $1[4*N];
		memset(m, 0, sizeof($1)*4*N);
		for(int i=0;i<4*N;++i)
			mt[i] = def;
	}
					// }}}
	RSQSet(int a[], int n){	// {{{
		def = $2;
		N = n;
		m = new $1[4*N];
		mt= new $1[4*N];
		init(a, 1, 0, N-1);
		for(int i=0;i<4*N;++i)
			mt[i] = def;
	}
							// }}}
	RSQSet(vector<int> &v){	// {{{
		def = $2;
		N = v.size();
		m = new $1[4*N];
		mt= new $1[4*N];
		init(v, 1, 0, N-1);
		for(int i=0;i<4*N;++i)
			mt[i] = def;
	}
							// }}}
	// {{{
	void init(int a[], int v, int vl, int vr){
		if(vl==vr){
			m[v] = a[vl];
			return ;
		}
		int mid = (vl+vr)>>1;
		init(a, v<<1, vl, mid);
		init(a, v<<1|1, mid+1, vr);
		m[v] = m[v<<1] + m[v<<1|1];
	}
	void init(vector<int> &a, int v, int vl, int vr){
		if(vl==vr){
			m[v] = a[vl];
			return ;
		}
		int mid = (vl+vr)>>1;
		init(a, v<<1, vl, mid);
		init(a, v<<1|1, mid+1, vr);
		m[v] = m[v<<1] + m[v<<1|1];
	}
	// }}}
	void set(int l, int r, $1 d){	// {{{
		set(l, r, d, 1, 0, N-1);
	}
	void set(int l, int r, $1 d, int v, int vl, int vr){
		if(l>r) return ;
		if(l<=vl && r>=vr){
			mt[v] = d;
			m[v]  = d*(r-l+1);
			return ;
		}
		int mid = (vl+vr)>>1;
		if(mt[v]!=def){
			mt[v<<1|1] = mt[v<<1] = mt[v];
			m[v<<1] = mt[v]*(mid-vl+1);
			m[v<<1|1]=mt[v]*(vr-mid);
			mt[v] = def;
		}
		set(l, MIN(r, mid), d, v<<1, vl, mid);
		set(MAX(l, mid+1), r, d, v<<1|1, mid+1, vr);
		m[v] = m[v<<1] + m[v<<1|1];
	}
									// }}}
	$1 sum(int l, int r){	// {{{
		return sum(l, r, 1, 0, N-1);
	}
	$1 sum(int l, int r, int v, int vl, int vr){
		if(l>r) return 0;
		if(l<=vl && r>=vr) return m[v];
		if(mt[v]!=def) return mt[v]*(r-l+1);
		int mid = (vl+vr)>>1;
		return sum(l, MIN(r, mid), v<<1, vl, mid)
			 + sum(MAX(l, mid+1), r, v<<1|1, mid+1, vr);
	}
							// }}}
};
endsnippet
snippet RMaxQSet "RMaxQSet" !b
class RMaxQSet{
	${1:int} *m, *mt;
	int N;
	int def;
public:
	RMaxQSet(int n){	// {{{
		def = ${2:-1234567890};
		N = n;
		m = new $1[4*N];
		mt= new $1[4*N];
		memset(m, 128, sizeof(LL)*4*N);
		for(int i=0;i<4*N;++i)
			mt[i] = def;
	}
						// }}}
	RMaxQSet(int a[], int n){	// {{{
		def = $2;
		N = n;
		m = new $1[4*N];
		mt= new $1[4*N];
		init(a, 1, 0, N-1);
		for(int i=0;i<4*N;++i)
			mt[i] = def;
	}
								// }}}
	RMaxQSet(vector<int> &v){	// {{{
		def = $2;
		N = v.size();
		m = new $1[4*N];
		mt= new $1[4*N];
		init(v, 1, 0, N-1);
		for(int i=0;i<4*N;++i)
			mt[i] = def;
	}
								// }}}
	// {{{
	void init(int a[], int v, int vl, int vr){
		if(vl==vr){
			m[v] = a[vl];
			return ;
		}
		int mid = (vl+vr)>>1;
		init(a, v<<1, vl, mid);
		init(a, v<<1|1, mid+1, vr);
		m[v] = MAX(m[v<<1], m[v<<1|1]);
	}
	void init(vector<int> &a, int v, int vl, int vr){
		if(vl==vr){
			m[v] = a[vl];
			return ;
		}
		int mid = (vl+vr)>>1;
		init(a, v<<1, vl, mid);
		init(a, v<<1|1, mid+1, vr);
		m[v] = MAX(m[v<<1], m[v<<1|1]);
	}
	// }}}
	void set(int l, int r, $1 d){	// {{{
		set(l, r, d, 1, 0, N-1);
	}
	void set(int l, int r, $1 d, int v, int vl, int vr){
		if(l>r) return ;
		if(l<=vl && r>=vr){
			m[v] = mt[v] = d;
			return ;
		}
		int mid = (vl+vr)>>1;
		if(mt[v]!=def){
			mt[v<<1|1] = mt[v<<1] = mt[v];
			m[v<<1|1] = m[v<<1] = mt[v];
			mt[v] = def;
		}
		set(l, MIN(r, mid), d, v<<1, vl, mid);
		set(MAX(l, mid+1), r, d, v<<1|1, mid+1, vr);
		m[v] = MAX(m[v<<1], m[v<<1|1]);
	}
									// }}}
	$1 max(int l, int r){	// {{{
		return max(l, r, 1, 0, N-1);
	}
	$1 max(int l, int r, int v, int vl, int vr){
		if(l>r) return -INF;
		if(l<=vl && r>=vr) return m[v];
		if(mt[v]!=def) return mt[v];
		int mid = (vl+vr)>>1;
		return std::max(max(l, MIN(r, mid), v<<1, vl, mid),
			 	max(MAX(l, mid+1), r, v<<1|1, mid+1, vr));
	}
							// }}}
};
endsnippet
snippet RMinQSet "RMinQSet" !b
class RMinQSet{
	${1:int} *m, *mt;
	int N;
	int def;
public:
	RMinQSet(int n){	// {{{
		def = ${2:-1234567890};
		N = n;
		m = new $1[4*N];
		mt= new $1[4*N];
		memset(m, 127, sizeof(LL)*4*N);
		for(int i=0;i<4*N;++i)
			mt[i] = def;
	}
						// }}}
	RMinQSet(int a[], int n){	// {{{
		def = $2;
		N = n;
		m = new $1[4*N];
		mt= new $1[4*N];
		init(a, 1, 0, N-1);
		for(int i=0;i<4*N;++i)
			mt[i] = def;
	}
								// }}}
	RMinQSet(vector<int> &v){	// {{{
		def = $2;
		N = v.size();
		m = new $1[4*N];
		mt= new $1[4*N];
		init(v, 1, 0, N-1);
		for(int i=0;i<4*N;++i)
			mt[i] = def;
	}
								// }}}
	// {{{
	void init(int a[], int v, int vl, int vr){
		if(vl==vr){
			m[v] = a[vl];
			return ;
		}
		int mid = (vl+vr)>>1;
		init(a, v<<1, vl, mid);
		init(a, v<<1|1, mid+1, vr);
		m[v] = MIN(m[v<<1], m[v<<1|1]);
	}
	void init(vector<int> &a, int v, int vl, int vr){
		if(vl==vr){
			m[v] = a[vl];
			return ;
		}
		int mid = (vl+vr)>>1;
		init(a, v<<1, vl, mid);
		init(a, v<<1|1, mid+1, vr);
		m[v] = MIN(m[v<<1], m[v<<1|1]);
	}
	// }}}
	void set(int l, int r, $1 d){	// {{{
		set(l, r, d, 1, 0, N-1);
	}
	void set(int l, int r, $1 d, int v, int vl, int vr){
		if(l>r) return ;
		if(l<=vl && r>=vr){
			m[v] = mt[v] = d;
			return ;
		}
		int mid = (vl+vr)>>1;
		if(mt[v]!=def){
			mt[v<<1|1] = mt[v<<1] = mt[v];
			m[v<<1|1] = m[v<<1] = mt[v];
			mt[v] = def;
		}
		set(l, MIN(r, mid), d, v<<1, vl, mid);
		set(MAX(l, mid+1), r, d, v<<1|1, mid+1, vr);
		m[v] = MIN(m[v<<1], m[v<<1|1]);
	}
									// }}}
	$1 min(int l, int r){	// {{{
		return min(l, r, 1, 0, N-1);
	}
	$1 min(int l, int r, int v, int vl, int vr){
		if(l>r) return INF;
		if(l<=vl && r>=vr) return m[v];
		if(mt[v]!=def) return mt[v];
		int mid = (vl+vr)>>1;
		return std::min(min(l, MIN(r, mid), v<<1, vl, mid),
			 	min(MAX(l, mid+1), r, v<<1|1, mid+1, vr));
	}
							// }}}
};
endsnippet
snippet RGcdQ "Segment tree for gcd" !b
class RGcdQ{
	${1:int} *m;
	int N;
public:
	RGcdQ(int n){	// {{{
		N = n;
		m = new $1[4*N];
		memset(m, 0, sizeof($1)*4*N);
	}
					// }}}
	RGcdQ($1 a[], int n){	// {{{
		N = n;
		m = new $1[4*N];
		init(a, 1, 0, N-1);
	}
							// }}}
	RGcdQ(vector<$1> &v){	// {{{
		N = v.size();
		m = new $1[4*N];
		init(v, 1, 0, N-1);
	}
							// }}}
	// {{{
	void init($1 a[], int v, int vl, int vr){
		if(vl==vr){
			m[v] = a[vl];
			return ;
		}
		int mid = (vl+vr)>>1;
		init(a, v<<1, vl, mid);
		init(a, v<<1|1, mid+1, vr);
		m[v] = _gcd(m[v<<1], m[v<<1|1]);
	}
	void init(vector<$1> &a, int v, int vl, int vr){
		if(vl==vr){
			m[v] = a[vl];
			return ;
		}
		int mid = (vl+vr)>>1;
		init(a, v<<1, vl, mid);
		init(a, v<<1|1, mid+1, vr);
		m[v] = _gcd(m[v<<1], m[v<<1|1]);
	}
	// }}}
	void add(int i, $1 d){	// {{{
		add(i, d, 1, 0, N-1);
	}
	void add(int i, $1 d, int v, int vl, int vr){
		if(vl==i && vr==i){
			m[v] += d;
			return ;
		}
		int mid = (vl+vr)>>1;
		if(mid >= i) add(i, d, v<<1, vl, mid);
		else add(i, d, v<<1|1, mid+1, vr);
		m[v] = _gcd(m[v<<1], m[v<<1|1]);
	}
							// }}}
	void set(int i, $1 a){	// {{{
		set(i, a, 1, 0, N-1);
	}
	void set(int i, $1 a, int v, int vl, int vr){
		if(vl==i && vr==i){
			m[v] = a;
			return ;
		}
		int mid = (vl+vr)>>1;
		if(mid >= i) set(i, a, v<<1, vl, mid);
		else set(i, a, v<<1|1, mid+1, vr);
		m[v] = _gcd(m[v<<1], m[v<<1|1]);
	}
							// }}}
	$1 gcd(int l, int r){	// {{{
		return max(($1)1, gcd(l, r, 1, 0, N-1));
	}
	$1 gcd(int l, int r, int v, int vl, int vr){
		if(l>r) return 0;
		if(l<=vl && r>=vr) return m[v];
		int mid = (vl+vr)>>1;
		return _gcd(gcd(l, MIN(r, mid), v<<1, vl, mid),
			        gcd(MAX(l, mid+1), r, v<<1|1, mid+1, vr));
	}
	inline $1 _gcd($1 _a, $1 _b)
	{
		if(_a<0) _a=-_a;
		if(_b<0) _b=-_b;
		while(_a!=0 && _b!=0) if(_a > _b) _a%=_b; else _b%=_a;
		return _a+_b;
	}
							// }}}
	$1 gcd(){ return MAX(1, m[1]); }
};
endsnippet
snippet RGcdQfast "RGcdQfast to up" !b
class RGcdQfast{
	${1:int} *m;
	int n, N;
public:
	RGcdQfast(int n){	// {{{
		N = 1;
		while(N < n) N <<= 1;
		m = new $1[N+N];
		memset(m, 0, sizeof($1)*2*N);
	}
						// }}}
	RGcdQfast($1 a[], int n){	// {{{
		N = 1;
		while(N < n) N <<= 1;
		m = new $1[N+N];
		for(int i=0;i<n;++i)
			m[N+i] = a[i];
		for(int i=N-1;i>0;--i)
			m[i] = _gcd(m[i<<1], m[i<<1|1]);
	}
								// }}}
	RGcdQfast(vector<$1> &v){	// {{{
		n = v.size();
		N = 1;
		while(N < n) N<<=1;
		m = new $1[N+N];
		for(int i=0;i<n;++i)
			m[N+i] = v[i];
		for(int i=N-1;i>0;--i)
			m[i] = _gcd(m[i<<1], m[i<<1|1]);
	}
								// }}}
	void add(int i, $1 d){	// {{{
		i += N;
		m[i] += d;
		for(i>>=1;i>0;i>>=1)
			m[i] = _gcd(m[i<<1], m[i<<1|1]);
	}
							// }}}
	void set(int i, $1 a){	// {{{
		i += N;
		m[i] = a;
		for(i>>=1;i>0;i>>=1)
			m[i] = _gcd(m[i<<1], m[i<<1|1]);
	}
							// }}}
	$1 gcd(int l, int r){	// {{{
		$1 res = 0;
		l += N;
		r += N;
		while(l<r){
			if(l&1) res = _gcd(res, m[l]), ++l;
			if((r&1)==0)res = _gcd(res, m[r]), --r;
			l>>=1;
			r>>=1;
		}
		if(l==r) res = _gcd(res, m[l]);
		return res;
	}
	inline $1 _gcd($1 _a, $1 _b)
	{
		if(_a<0) _a=-_a;
		if(_b<0) _b=-_b;
		while(_a!=0 && _b!=0) if(_a > _b) _a%=_b; else _b%=_a;
		return _a+_b;
	}
							// }}}
	$1 gcd(){ return MAX(1, m[1]); }
};
endsnippet
