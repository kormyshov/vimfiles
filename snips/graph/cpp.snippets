snippet clique "max clique" !b
int n;
vector<LL> g;

int clique(LL cl, LL cand, LL out, int size = 0)
{ // {{{
    int result = 0;
    LL candintersect = (1LL << n) - 1;
    for (int i = 0; i < n; ++i) if (cand & (1LL << i)) candintersect &= g[i];
    if (out & candintersect) return result;

    for (int i = 0; i < n; ++i) if (cand & (1LL << i)) {
        LL mask = 1LL << i;
        LL ncand = cand & g[i], nout = out & g[i];
        if (ncand == 0 && nout == 0)
            result = max(result, size + 1);
        else
            result = max(result, clique(cl | mask, ncand, nout, size + 1));
        cand = cand & ~mask;
        if (!cand) return result;
        out = out | mask;
    }
    return result;
} // }}}
$0
endsnippet
snippet Dijkstra "Dijkstra with sqrt" !b
// {{{
vector<int> dijkstra_d, dijkstra_f, dijkstra_sqrt_d;
int dijkstra_sqrt_n;

void dijkstra_init(int v){
	dijkstra_sqrt_n = max(1., sqrt(N*0.5));
	dijkstra_sqrt_d.assign(N/dijkstra_sqrt_n+1, INF2);
	dijkstra_sqrt_d[v/dijkstra_sqrt_n] = 0;
}

int dijkstra_get(){
	int v = -1, i, t=0, dt;
	for(i=1;i<(int)dijkstra_sqrt_d.size();++i)
		if(dijkstra_sqrt_d[t] > dijkstra_sqrt_d[i]) t=i;
	int l = t*dijkstra_sqrt_n, r = min(l+dijkstra_sqrt_n, N);
	dt = dijkstra_sqrt_d[t];
	dijkstra_sqrt_d[t] = INF2;
	for(i=l; i<r; ++i)
		if(!dijkstra_f[i]){
		if(dt==dijkstra_d[i]) dijkstra_f[i]=1, --dt, v=i;
		else dijkstra_sqrt_d[t] = min(dijkstra_sqrt_d[t], dijkstra_d[i]);
	}
	return v;
}
// }}}
vector<int> Dijkstra(int s)
{ // {{{
	dijkstra_d.assign(N, INF2);
	dijkstra_f.assign(N, 0);
	dijkstra_d[s] = 0;
	dijkstra_init(s);
	int i, j, v, to, len;
	for(i=0;i<N;++i){
		v = dijkstra_get();
		if(v<0 || dijkstra_d[v] >= INF2) break;
		for(j=0; j<(int)g[v].size(); ++j){
			to = g[v][j].first;
			len = g[v][j].second;
			if(dijkstra_d[v] + len < dijkstra_d[to]){
				dijkstra_d[to] = dijkstra_d[v] + len;
				if(dijkstra_sqrt_d[to/dijkstra_sqrt_n] > dijkstra_d[to])
					dijkstra_sqrt_d[to/dijkstra_sqrt_n] = dijkstra_d[to];
			}
		}
	}
	return dijkstra_d;
} // }}}
endsnippet
snippet DijkstraHeap "Dijkstra with heap" !b
// {{{
vector<int> dijkstra_heap, dijkstra_heap_p, dijkstra_d;

void dijkstra_pop(){
	dijkstra_heap_p[dijkstra_heap[1]] = 0;
	dijkstra_heap[1] = dijkstra_heap[dijkstra_heap[0]--];
	int t = dijkstra_heap[1], a = 1, mn;
	while(2*a <= dijkstra_heap[0]){
		mn = 2*a;
		if(mn+1<=dijkstra_heap[0] &&
		   dijkstra_d[dijkstra_heap[mn+1]] < dijkstra_d[dijkstra_heap[mn]])
			mn++;
		if(dijkstra_d[dijkstra_heap[mn]] < dijkstra_d[t]){
			dijkstra_heap[a] = dijkstra_heap[mn];
			dijkstra_heap_p[dijkstra_heap[a]] = a;
			a = mn;
		}else break;
	}
	dijkstra_heap[a] = t;
	dijkstra_heap_p[t] = a;
}

void dijkstra_relax(int v){
	if(dijkstra_heap_p[v] == 0)
		dijkstra_heap[++dijkstra_heap[0]] = v, dijkstra_heap_p[v] = dijkstra_heap[0];
	int a = dijkstra_heap_p[v];
	while(a>1)
		if(dijkstra_d[dijkstra_heap[a>>1]] > dijkstra_d[v]){
			dijkstra_heap[a] = dijkstra_heap[a>>1];
			dijkstra_heap_p[dijkstra_heap[a]] = a;
			a >>= 1;
		}else break;
	dijkstra_heap[a] = v;
	dijkstra_heap_p[v] = a;
}
// }}}
vector<int> Dijkstra(int s)
{ // {{{
	dijkstra_d.assign(N, INF2);
	dijkstra_d[s] = 0;
	dijkstra_heap.assign(N+1,0);
	dijkstra_heap[0] = 1;
	dijkstra_heap[1] = s;
	dijkstra_heap_p.assign(N, 0);
	dijkstra_heap_p[s] = 1;
	while(dijkstra_heap[0]){
		int v = dijkstra_heap[1];
		dijkstra_pop();
		for(int j=0;j<(int)g[v].size();++j){
			int to = g[v][j].first,
				len = g[v][j].second;
			if(dijkstra_d[v]+len < dijkstra_d[to]){
				dijkstra_d[to] = dijkstra_d[v] + len;
				dijkstra_relax(to);
			}
		}
	}
	return dijkstra_d;
} // }}}
endsnippet
snippet Floyd "Floyd inline" !b
for(int _floyd_k_=0; _floyd_k_<${1:n}; ++_floyd_k_)
	for(int _floyd_i_=0; _floyd_i_<$1; ++_floyd_i_)
		for(int _floyd_j_=0; _floyd_j_<$1; ++_floyd_j_)
			${2:mm}[_floyd_i_][_floyd_j_] = min($2[_floyd_i_][_floyd_j_],
							$2[_floyd_i_][_floyd_k_]+$2[_floyd_k_][_floyd_j_]);
endsnippet
snippet dfs "Standard DFS" !b
void dfs(int _v){
	${1:u}[_v] = 1;
	for(auto _h : ${2:g}[_v])
		if(!$1[_h]) dfs(_h);
}
endsnippet
snippet dfsex "DFS for modification" !b
void dfs(int ${1:v}${2:, int p}){
	${3:u}[$1] = ${9:1};
	for(int ${4:i}=0; $4<(int)${5:g}[$1].size(); ++$4){
		int ${6:to} = $5[$1][$4];
		if(!$3[$6]){
			dfs($6${11:, $1});
		}else{
			${7:// nothing...}
		}
	}
	${8:$3[$1] = ${10:2};}
}
endsnippet
snippet kuhn "Kuhn" !b
int mt[${1:100500}];
bool kuhn(int _v){
	if(${1:u}[_v]) return false;
	$1[_v] = 1;
	for(auto to : ${2:g}[_v])
		if(mt[to]==-1 || kuhn(mt[to])){
			mt[to] = _v;
			return true;
		}
	return false;
}
endsnippet
snippet SimpleEdge "class SimpleEdge" !b
class SimpleEdge {			// {{{
	int u;
public:
	SimpleEdge(): u(-1) {};
	SimpleEdge(int _u): u(_u) {};
	static int type() { return 0; }
	static int type_w() { return 1; }
	static int type_f() { return -1; }

	int get_u() { return u; }
	void set_u(int _u) { u = _u; }

	int get_w() { return 1; }
};
							// }}}
endsnippet
snippet WeightedEdge "class WeightedEdge" !b
template<typename T>
class WeightedEdge {		// {{{
	int u;
	T w;
public:
	WeightedEdge(): u(-1), w(0) {};
	WeightedEdge(int _u, T _w = 1): u(_u), w(_w) {};
	static int type() { return 1; }
	static T type_w() { return new T; }
	static int type_f() { return -1; }

	int get_u() { return u; }
	void set_u(int _u) { u = _u; }

	T get_w() { return w; }
	void set_w(T _w) { w = _w; }
};
							// }}}
endsnippet
snippet FlowEdge "class FlowEdge" !b
template<typename T>
class FlowEdge {			// {{{
	int u;
	T c, f;
public:
	FlowEdge(): u(-1), c(0), f(0) {};
	FlowEdge(int _u, T _c = 1): u(_u), c(_c), f(0) {};
	static int type() { return 2; }
	static int type_w() { return 1; }
	static T type_f() { return new T; }

	int get_u() { return u; }
	void set_u(int _u) { u = _u; }

	T get_c() { return c; }
	void set_c(T _c) { c = _c; }

	T get_f() { return f; }
	void set_f(T _f) { f = _f; }

	int get_w() { return 1; }

	void push(T p) { f += p; }
};
							// }}}
endsnippet
snippet FlowWeightedEdge "class FlowWeightedEdge" !b
template<typename T1, typename T2>
class FlowWeightedEdge {	// {{{
	int u;
	T1 w;
	T2 c, f;
public:
	FlowWeightedEdge(): u(-1), w(0), c(0), f(0) {};
	FlowWeightedEdge(int _u, T1 _w = 1, T2 _c = 1): u(_u), w(_w), c(_c), f(0) {};
	static int type() { return 3; }
	static T1 type_w() { return new T1; }
	static T2 type_f() { return new T2; }

	int get_u() { return u; }
	void set_u(int _u) { u = _u; }

	T1 get_w() { return w; }
	void set_w(T1 _w) { w = _w; }

	T2 get_c() { return c; }
	void set_c(T2 _c) { c = _c; }

	T2 get_f() { return f; }
	void set_f(T2 _f) { f = _f; }

	void push(T2 p) { f += p; }
};
							// }}}
endsnippet
snippet Graph "class Graph" !b
template<typename T>
class Graph {
public:
	int N;
	vector<int> *g;
	vector<T> ve;

	Graph(int _N) {	// {{{
		N = _N;
		g = new vector<int>[N];
	}				// }}}

	static int type() { return T::type(); }
	static ${1:decltype(T::type_w())} type_w() { return T::type_w(); }
	static ${2:decltype(T::type_f())} type_f() { return T::type_f(); }

	void addEdge(int v, int u) {				// {{{
		T e(u);
		g[v].push_back(ve.size());
		ve.push_back(e);
	}
												// }}}
	template<typename T1>
	void addEdge(int v, int u, T1 t) {			// {{{
		T e(u, t);
		g[v].push_back(ve.size());
		ve.push_back(e);
	}
												// }}}
	template<typename T1, typename T2>
	void addEdge(int v, int u, T1 w, T2 c) {	// {{{
		T e(u, w, c);
		g[v].push_back(ve.size());
		ve.push_back(e);
	}
												// }}}
	template<typename T1>
	void addFlowEdge(int v, int u, T1 c) {		// {{{
		T e1(u, c);
		g[v].push_back(ve.size());
		ve.push_back(e1);
		T e2(v, 0);
		g[u].push_back(ve.size());
		ve.push_back(e2);
	}
												// }}}
	bool isSparse() { return !N || ve.size() * 100 / N < N; }
};
endsnippet
snippet DFS "class dfs for Graph" !b
class {
public:
	vector<int> u;

	template<typename T>
	void operator ()(T &graph, int v){	// {{{
		u.assign(graph.N, 0);
		dfs(graph, v);
	}
										// }}}
	template<typename T>
	void dfs(T &graph, int v){
		u[v] = 1;
		for(auto id : graph.g[v]){
			int to = graph.ve[id].get_u();
			if(!u[to]) dfs(graph, to);
		}
	}

} dfs;
endsnippet
snippet Distance "class Distance for Graph" !b
class {
public:
	vector<int> p;

	template<typename T>
	vector<${1:decltype(T::type_w())}> operator ()(T &graph, int s){
		vector<$1> d(graph.N, INF2);
		d[s] = 0;
		p.assign(graph.N, -1);

		if(graph.ve.size() == 0) return d;

		if(!(T::type() & 1)){		// bfs {{{

			queue<int> q;
			q.push(s);
			while(!q.empty()){
				int v = q.front();
				q.pop();
				for(auto id : graph.g[v]){
					int to = graph.ve[id].get_u();
					if(d[to] == INF2)
						d[to] = d[v] + 1,
						p[to] = v,
						q.push(to);
				}
			}
									// }}}
		}else{
			if(graph.isSparse()){	// set {{{

				set<pair<$1,int> > st;
				st.insert(make_pair(0, s));
				while(!st.empty()){
					int v = st.begin()->second;
					st.erase(st.begin());
					for(auto id : graph.g[v]){
						int to = graph.ve[id].get_u();
						auto w = graph.ve[id].get_w();
						if(d[to] > d[v] + w){
							st.erase(make_pair(d[to], to));
							d[to] = d[v] + w;
							p[to] = v;
							st.insert(make_pair(d[to], to));
						}
					}
				}
									// }}}
			}else{					// sqrt {{{

				int sqrt_n = (int)max(1., sqrt(graph.N*.5));
				vector<$1> sqrt_d(graph.N/sqrt_n+1, INF2);
				sqrt_d[s/sqrt_n] = 0;
				vector<int> f(graph.N, 0);

				for(int i=0; i<graph.N; ++i){

					int v = -1, t = 0;
					for(int j=1; j<(int)sqrt_d.size(); ++j)
						if(sqrt_d[t] > sqrt_d[j]) t = j;

					int l = t*sqrt_n, r = min(l+sqrt_n, graph.N);
					auto dt = sqrt_d[t];
					sqrt_d[t] = INF2;

					for(int j=l; j<r; ++j) if(!f[j]){
						if(dt == d[j]) f[j] = 1, --dt, v = j;
						else sqrt_d[t] = min(sqrt_d[t], d[j]);
					}

					if(v < 0 || d[v] >= INF2) break;

					for(auto id : graph.g[v]){
						int to = graph.ve[id].get_u();
						auto w = graph.ve[id].get_w();
						if(d[to] > d[v] + w){
							d[to] = d[v] + w;
							p[to] = v;
							sqrt_d[to/sqrt_n] = min(sqrt_d[to/sqrt_n], d[to]);
						}
					}
				}
									// }}}
			}
		}

		return d;
	}

	vector<int> path(int to){		// {{{
		vector<int> v;
		do{
			v.push_back(to);
			to = p[to];
		}while(to >= 0);
		reverse(v.begin(), v.end());
		return v;
	}
									// }}}
} Distance;
endsnippet
snippet MaxFlow "class MaxFlow for Graph" !b
class {
	vector<int> d;
	vector<int> ptr;
	int S, T;
public:
	template<typename U>
	${2:decltype(U::type_f())} operator ()(U &graph, int s, int t){	// {{{
		S = s;
		T = t;
		$2 flow = 0, f;

		while(bfs(graph)){
			ptr.assign(graph.N, 0);
			while((f = dfs(graph, S)) > EPS)
				flow += f;
		}
		return flow;
	}

	template<typename U>
	bool bfs(U &graph){
		queue<int> q;
		q.push(S);
		d.assign(graph.N, -1);
		d[S] = 0;

		while(!q.empty()){
			int v = q.front();
			q.pop();
			for(auto id : graph.g[v]){
				auto e = graph.ve[id];
				if(d[e.get_u()] == -1 && e.get_f() < e.get_c())
					d[e.get_u()] = d[v] + 1,
					q.push(e.get_u());
			}

		}

		return d[T] != -1;
	}

	template<typename U>
	$2 dfs(U &graph, int v, $2 f = INF){
		if(f < EPS) return 0;
		if(v == T) return f;
		for(; ptr[v] < (int)graph.g[v].size(); ++ptr[v]){
			int id = graph.g[v][ptr[v]];
			auto e = graph.ve[id];
			if(d[e.get_u()] != d[v] + 1) continue ;
			auto p = dfs(graph, e.get_u(), min(f, e.get_c()-e.get_f()));
			if(p > EPS){
				graph.ve[id].push(p);
				graph.ve[id^1].push(-p);
				return p;
			}
		}
		return 0;
	}
																// }}}
} MaxFlow;
endsnippet
