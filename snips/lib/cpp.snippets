snippet test "cpp4cf test" !b
/* Test on
${1}
// ${2}
*/
$0
endsnippet
snippet stov "For SRM string to vector<int>"
vector<int> stov(string &_s){
	stringstream _ss(_s);
	vector<int> _v;
	int _a;
	while(_ss>>_a) _v.push_back(_a);
	return _v;
}
endsnippet
snippet vstov "For SRM vector<string> to vector<int>"
vector<int> vstov(vector<string> &_vs){
	stringstream _ss;
	for(auto _h : _vs) _ss << _h;
	int _a;
	vector<int> _v;
	while(_ss>>_a) _v.push_back(_a);
	return _v;
}
endsnippet
snippet gcj "MultiThread solver for GCJ" !b
ifstream in("input.txt");
ofstream out("output.txt");

// Не забудь в main добавить вызов gcj_solve()
#define MAX_T ${1:101}
#define MAX_Threads ${2:4}
sem_t sem[MAX_T], sem_count, sem_stack;
pthread_t pthread[MAX_T];
stack<int> thread_stack;

int thread_pop(){
	sem_wait(&sem_stack);
	int r = thread_stack.top();
	thread_stack.pop();
	sem_post(&sem_stack);
	return r;
}
void thread_push(int a){
	sem_wait(&sem_stack);
	thread_stack.push(a);
	sem_post(&sem_stack);
}

class Answer{
public:
	int ans;
	friend ostream& operator <<(ostream& out, const Answer &a){
		out<<a.ans;
		//out<< setprecision(12) <<a.ans;
		return out;
	}
};
Answer ans[MAX_T];

void* solve(void *_id){
	const int id = *(int*)_id;
	const int num_th = thread_pop();
	// считывание данных



	// завершение считывания
	sem_post(&sem[id+1]);
	// основное решение



	// окончание решения
	//sem_wait(&sem[id]);
	// вывод данных

	//out<<"Case #"<<id<<": ";


	cout<<"Write in "<<id<<endl;
	// окончание вывода
	thread_push(num_th);
	sem_post(&sem[id+1]);
	sem_post(&sem_count);
	pthread_exit(0);
}

void gcj_solve(){
	cout<<"Start solver.\n";
	int T;
	char s[99];
	in>>T;

	sem_init(&sem_count, 0, MAX_Threads);
	sem_init(&sem_stack, 0, 1);
	sem_init(&sem[1], 0, 2);
	for(int ii=2; ii<=T; ++ii) sem_init(&sem[ii], 0, 0);
	for(int ii=0; ii<MAX_Threads; ++ii) thread_stack.push(ii);

	for(int ii=0; ii<T;){
		cout<<"Wait start "<<ii<<" thread.\n";
		sem_wait(&sem[ii+1]);
		sem_wait(&sem_count);
		++ii;
		cout<<"Go "<<ii<<" thread.\n";
		if(pthread_create(&pthread[ii], NULL, solve, &ii) != 0){
			sprintf(s, "Creating the %d thread", ii);
			perror(s);
			return ;
		}
	}
	for(int ii=1; ii<=T; ++ii){
		if(pthread_join(pthread[ii], NULL) != 0){
			sprintf(s, "Joining the %d thread", ii);
			perror(s);
			return ;
		}
	}
	for(int ii=1; ii<=T; ++ii) out<<"Case #"<<ii<<": "<<ans[ii]<<endl;
	cout<<"End solver.\n";
}
endsnippet
snippet between "bool between(int, int, int)" !b
bool between(int a, int b, int c){
	return (a-b)*1LL*(b-c) >= 0;
}
endsnippet
snippet betweenLL "bool between(LL, LL, LL)" !b
bool between(LL a, LL b, LL c){
	return (a>=b && b>=c) || (a<=b && b<=c);
}
endsnippet
snippet cmp "Functor for comparator" !b
class cmp{
public:
	bool operator()(${1:int} a, $1 b){
		return $2;
	}
};
endsnippet
