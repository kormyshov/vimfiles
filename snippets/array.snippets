# =============================== array ======================

snippet array slbound(const vector<T> &), int lbound(const vector<T> &, T, bool)
	vector<${1:int}> _lbound_l1;
	int _lbound_bS;
	void slbound(const vector<$1> &_v)
	{
		_lbound_bS = 0;
		while(_lbound_bS * _lbound_bS < int(_v.size()))
			++_lbound_bS;
		_lbound_l1.resize(_lbound_bS);
		int _i, _j;
		for(_i=_lbound_bS-1, _j=0; _i<int(_v.size()); _i+=_lbound_bS, ++_j)
			_lbound_l1[_j] = _v[_i];
		if(_j<_lbound_bS)
			_lbound_l1[_j] = _v[_v.size()-1];
	}
	
	int lbound(const vector<$1> &_v, $1 _q, bool _restart = false)
	{
		if(_restart) slbound(_v);
	
		int _x = int(lower_bound(_lbound_l1.begin(), _lbound_l1.end(), _q) - _lbound_l1.begin());
		if(_x != _lbound_bS)
			return int(lower_bound(_v.begin()+_x*_lbound_bS, (_x+1)*_lbound_bS < int(_v.size()) ? _v.begin()+(_x+1)*_lbound_bS : _v.end(), _q) - _v.begin());
		else
			return int(_v.size());
	}
	${2}

snippet lbound
	vector<${1:int}> _lbound_l1;
	int _lbound_bS;
	void slbound(const vector<$1> &_v)
	{
		_lbound_bS = 0;
		while(_lbound_bS * _lbound_bS < int(_v.size()))
			++_lbound_bS;
		_lbound_l1.resize(_lbound_bS);
		int _i, _j;
		for(_i=_lbound_bS-1, _j=0; _i<int(_v.size()); _i+=_lbound_bS, ++_j)
			_lbound_l1[_j] = _v[_i];
		if(_j<_lbound_bS)
			_lbound_l1[_j] = _v[_v.size()-1];
	}
	
	int lbound(const vector<$1> &_v, $1 _q, bool _restart = false)
	{
		if(_restart) slbound(_v);
	
		int _x = int(lower_bound(_lbound_l1.begin(), _lbound_l1.end(), _q) - _lbound_l1.begin());
		if(_x != _lbound_bS)
			return int(lower_bound(_v.begin()+_x*_lbound_bS, (_x+1)*_lbound_bS < int(_v.size()) ? _v.begin()+(_x+1)*_lbound_bS : _v.end(), _q) - _v.begin());
		else
			return int(_v.size());
	}
	${2}

