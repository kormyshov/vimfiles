# =============================== algebra =====================

snippet algebra <T> pow(<T>, <T>)
	${1:int} pow($1 _a, LL _b)
	{
		$1 _r = 1${2: % MOD};
		while(_b)
		{
			if(_b&1) _r = _r * _a$2;
			_a = _a * _a$2;
			_b >>= 1;
		}
		return _r;
	}
	${3}
snippet pow
	${1:int} pow($1 _a, LL _b)
	{
		$1 _r = 1${2: % MOD};
		while(_b)
		{
			if(_b&1) _r = _r * _a$2;
			_a = _a * _a$2;
			_b >>= 1;
		}
		return _r;
	}
	${3}

snippet algebra <T> phi(<T>)
	${1:int} phi($1 _n)
	{
		$1 _res = _n, _i;
		for(_i=2; _i*_i<=_n; ++_i)
			if(_n % _i == 0)
			{
				while(_n % _i == 0) _n /= _i;
				_res -= _res / _i;
			}
		if(_n > 1) _res -= _res / _n;
		return _res;
	}
	${2}
snippet phi
	${1:int} phi($1 _n)
	{
		$1 _res = _n, _i;
		for(_i=2; _i*_i<=_n; ++_i)
			if(_n % _i == 0)
			{
				while(_n % _i == 0) _n /= _i;
				_res -= _res / _i;
			}
		if(_n > 1) _res -= _res / _n;
		return _res;
	}
	${2}

snippet algebra <T> reverse(<T>, <T>)
	${2:gcdex}
	${1:int} reverse($1 _n, $1 _m)
	{
		$1 _x, _y;
		$1 _g = gcdex(_n, _m, _x, _y);
		if(_g != 1) return -1;
		else return (_x % _m + _m) % _m;
	}
snippet reverse
	${2:gcdex}
	${1:int} reverse($1 _n, $1 _m)
	{
		$1 _x, _y;
		$1 _g = gcdex(_n, _m, _x, _y);
		if(_g != 1) return -1;
		else return (_x % _m + _m) % _m;
	}

snippet algebra <T> gcd(<T>, <T>)
	${1:int} gcd($1 _a, $1 _b)
	{
		$1 _t;
		while(_a)
		{
			_t = _b % _a;
			_b = _a;
			_a = _t;
		}
		return _b;
	}
	${2}
snippet gcd
	${1:int} gcd($1 _a, $1 _b)
	{
		$1 _t;
		while(_a)
		{
			_t = _b % _a;
			_b = _a;
			_a = _t;
		}
		return _b;
	}
	${2}

snippet algebra <T> lcm(<T>, <T>)
	${2:gcd}
	${1:int} lcm($1 _a, $1 _b)
	{
		return _a / gcd(_a, _b) * _b;
	}
snippet lcm
	${2:gcd}
	${1:int} lcm($1 _a, $1 _b)
	{
		return _a / gcd(_a, _b) * _b;
	}

snippet algebra <T> gcdex(<T>, <T>, <T> &, <T> &)
	${1:int} gcdex($1 _a, $1 _b, $1 &_x, $1 &_y)
	{
		if(!_a)
		{
			_x = 0;
			_y = 1;
			return _b;
		}
		$1 _x1, _y1;
		$1 _d = gcdex(_b % _a, _a, _x1, _y1);
		_x = _y1 - (_b / _a) * _x1;
		_y = _x1;
		return _d;
	}
	${2}
snippet gcdex
	${1:int} gcdex($1 _a, $1 _b, $1 &_x, $1 &_y)
	{
		if(!_a)
		{
			_x = 0;
			_y = 1;
			return _b;
		}
		$1 _x1, _y1;
		$1 _d = gcdex(_b % _a, _a, _x1, _y1);
		_x = _y1 - (_b / _a) * _x1;
		_y = _x1;
		return _d;
	}
	${2}

snippet algebra void eratosfen(int, <T> [])
	void eratosfen(int _n, ${1:int} &_m[])
	{
		memset(_m, 1, sizeof(_m));
		_m[0] = _m[1] = 0;
		for(int _i=2; _i * 1LL * _i < _n; ++_i)
			if(_m[i])
				for(int _j=_i*_i; _j<_n; _j+=_i)
					_m[_j] = 0;
	}
	${2}
snippet eratosfen
	void eratosfen(int _n, ${1:int} &_m[])
	{
		memset(_m, 1, sizeof(_m));
		_m[0] = _m[1] = 0;
		for(int _i=2; _i * 1LL * _i < _n; ++_i)
			if(_m[i])
				for(int _j=_i*_i; _j<_n; _j+=_i)
					_m[_j] = 0;
	}
	${2}




