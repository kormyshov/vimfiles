snippet Fenwick "Fenwick" !b
class Fenwick{
	${1:int} *m;
	int N;
public:
	Fenwick(int n){
		N = n;
		m = new $1[N];
		memset(m, 0, sizeof($1)*N);
	}
	Fenwick(int a[], int n){
		N = n;
		m = new $1[N];
		memset(m, 0, sizeof($1)*N);
		for(int i=0;i<N;++i){
			m[i] += a[i];
			if((i|(i+1))<N) m[i|(i+1)] += m[i];
		}
	}
	Fenwick(vector<int> &a){
		N = a.size();
		m = new $1[N];
		memset(m, 0, sizeof($1)*N);
		for(int i=0;i<N;++i){
			m[i] += a[i];
			if((i|(i+1))<N) m[i|(i+1)] += m[i];
		}
	}
	void add(int i, $1 d){
		for(;i<N;i|=i+1) m[i] += d;
	}
	$1 sum(int i){
		$1 res = 0;
		for(;i>=0;i=(i&(i+1))-1) res += m[i];
		return res;
	}
	$1 sum(int l, int r){
		return sum(r) - sum(l-1);
	}
};
$0
endsnippet
snippet FenwickAdd "FenwickAdd" !b
class FenwickAdd{
	${1:int} *m, *mt;
	int N;
public:
	FenwickAdd(int n){
		N = n;
		m = new $1[N];
		mt = new $1[N];
		memset(m, 0, sizeof($1)*N);
		memset(mt, 0, sizeof($1)*N);
	}
	FenwickAdd(int a[], int n){
		N = n;
		m = new $1[N];
		mt = new $1[N];
		memset(m, 0, sizeof($1)*N);
		memset(mt, 0, sizeof($1)*N);
		for(int i=0;i<N;++i){
			m[i] += a[i];
			if((i|(i+1))<N) m[i|(i+1)] += m[i];
		}
	}
	FenwickAdd(vector<int> &a){
		N = a.size();
		m = new $1[N];
		mt = new $1[N];
		memset(m, 0, sizeof($1)*N);
		memset(mt, 0, sizeof($1)*N);
		for(int i=0;i<N;++i){
			m[i] += a[i];
			if((i|(i+1))<N) m[i|(i+1)] += m[i];
		}
	}
	void add(int i, $1 d){
		for(;i<N;i|=i+1) m[i] += d;
	}
	void add_prefix(int r, $1 d){
		if(r<0) return ;
		for(int i=r;i>=0;i=(i&(i+1))-1) mt[i] += d;
		for(int i=r|(r+1);i<N;i|=i+1) m[i] += d*(r-(i&(i+1))+1);
	}
	void add(int l, int r, $1 d){
		add_prefix(r, d);
		add_prefix(l-1, -d);
	}
	$1 sum(int r){
		if(r<0) return 0;
		$1 res = 0;
		for(int i=r;i>=0;i=(i&(i+1))-1) res += m[i] + mt[i]*(i-(i&(i+1))+1);
		for(int i=r|(r+1);i<N;i|=i+1) res += mt[i]*(r-(i&(i+1))+1);
		return res;
	}
	$1 sum(int l, int r){
		return sum(r) - sum(l-1);
	}
};
$0
endsnippet
snippet FenwickMin "FenwickMin" !b
class FenwickMin{
	${1:int} *md, *mu;
	int N;
public:
	FenwickMin(int n){
		N = n;
		md = new $1[N];
		mu = new $1[N];
		memset(md, 127, sizeof($1)*N);
		memset(mu, 127, sizeof($1)*N);
	}
	FenwickMin(int a[], int n){
		N = n;
		md = new $1[N];
		mu = new $1[N];
		memset(md, 127, sizeof($1)*N);
		memset(mu, 127, sizeof($1)*N);
		for(int i=N-1, t=i&(i-1);i>0;--i, t=i&(i-1)){
			if(md[i]>a[i]) md[i]=a[i];
			if(t>0 && md[t]>md[i]) md[t]=md[i];
		}
		for(int i=0, t=i|(i+1);i<N;++i, t=i|(i+1)){
			if(mu[i]>a[i]) mu[i]=a[i];
			if(t<N && mu[t]>mu[i]) mu[t]=mu[i];
		}
	}
	FenwickMin(vector<int> &a){
		N = a.size();
		md = new $1[N];
		mu = new $1[N];
		memset(md, 127, sizeof($1)*N);
		memset(mu, 127, sizeof($1)*N);
		for(int i=N-1, t=i&(i-1);i>0;--i, t=i&(i-1)){
			if(md[i]>a[i]) md[i]=a[i];
			if(t>0 && md[t]>md[i]) md[t]=md[i];
		}
		for(int i=0, t=i|(i+1);i<N;++i, t=i|(i+1)){
			if(mu[i]>a[i]) mu[i]=a[i];
			if(t<N && mu[t]>mu[i]) mu[t]=mu[i];
		}
	}
	void relax(int n, $1 d){
		for(int i=n;i>0;i&=i-1) if(md[i]>d) md[i]=d;
		for(int i=n;i<N;i|=i+1) if(mu[i]>d) mu[i]=d;
	}
	$1 min(int l, int r){
		$1 res=INF;
		if(!l){
			for(;r>=0;r=(r&(r+1))-1) if(res>mu[r])res=mu[r];
			return res;
		}
		for(;(r&(r+1))>=l;r=(r&(r+1))-1) if(res>mu[r])res=mu[r];
		for(;(l|(l-1))<=r;l=(l|(l-1))+1) if(res>md[l])res=md[l];
		return res;
	}
	void add(int n, $1 d){
		if(d<0){
			d += (n&1 ? md[n] : mu[n]);
			relax(n, d);
			return ;
		}
		$1 t;
		int to, tmp;
		if(n&1){
			md[n] += d;
			t = md[n];
			to = (n&(n+1))-1;
			for(int i=n-1; i>=0 && i>to; i=(i&(i+1))-1)
				if(t>mu[i]) t = mu[i];
			mu[n] = t;
		}else{
			mu[n] += d;
			t = mu[n];
			to = (n|(n-1))+1;
			for(int i=n+1; i<N && i<to; i=(i|(i-1))+1)
				if(t>md[i]) t = md[i];
			md[n] = t;
		}
		t = mu[n];
		for(int i=n, j=n; i<N; i=to){
			if(i+1<N && t>md[i+1]) t = md[i+1];
			to = i|(i+1);
			tmp = (to&(to+1))-1;
			while(tmp != (j&(j+1))-1){
				j = (j&(j+1))-1;
				if(t>mu[j]) t = mu[j];
			}
			if(to<N && mu[to]<t) mu[to] = t;
			else break;
		}
		t = md[n];
		for(int i=n, j=n; i>0; i=to){
			if(t>mu[i-1]) t = mu[i-1];
			to = i&(i-1);
			tmp = (to|(to-1))+1;
			while(tmp != (j|(j-1))+1){
				j = (j|(j-1))+1;
				if(j<N && t>md[j]) t = md[j];
			}
			if(to>0 && md[to]<t) md[to] = t;
			else break;
		}
	}
};
$0
endsnippet
